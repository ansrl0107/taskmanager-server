service:
  name: taskmanager

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-layers

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: task-manager-deployment-bucket
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    NODE_ENV: local
    MYSQL_HOST: tm-new.c5itfod3ti8q.ap-northeast-2.rds.amazonaws.com
    MYSQL_USERNAME: admin
    MYSQL_PASSWORD: 12341234
    MYSQL_DATABASE: taskmanager
    JWT_SECRET: qnjvfdWQJvfujqwM
    JWT_ISSUER: task.tablemanager.io

custom:
  serverless-layers:
    packageManager: yarn

functions:
  login:
    handler: src/controller/auth/login.handler
    events:
      - http:
          cors: true
          method: POST
          path: /auth/login
  addProject:
    handler: src/controller/projects/addProject.handler
    events:
      - http:
          cors: true
          method: POST
          path: /projects
  getProjects:
    handler: src/controller/projects/getProjects.handler
    events:
      - http:
          cors: true
          method: GET
          path: /projects
  addTask:
    handler: src/controller/tasks/addTask.handler
    events:
      - http:
          cors: true
          method: POST
          path: /tasks
  deleteTask:
    handler: src/controller/tasks/deleteTask.handler
    events:
      - http:
          cors: true
          method: DELETE
          path: /tasks/{taskId}
  getTasks:
    handler: src/controller/tasks/getTasks.handler
    events:
      - http:
          cors: true
          method: GET
          path: /tasks
  addTicket:
    handler: src/controller/tickets/addTicket.handler
    events:
      - http:
          cors: true
          method: POST
          path: /tickets
  closeTicket:
    handler: src/controller/tickets/closeTicket.handler
    events:
      - http:
          cors: true
          method: PATCH
          path: /tickets/{ticketId}/close
  getTicket:
    handler: src/controller/tickets/getTicket.handler
    events:
      - http:
          cors: true
          method: GET
          path: /tickets/{ticketId}
  getTickets:
    handler: src/controller/tickets/getTickets.handler
    events:
      - http:
          cors: true
          method: GET
          path: /tickets
  addTeamMember:
    handler: src/controller/users/addTeamMember.handler
    events:
      - http:
          cors: true
          method: POST
          path: /users
  getTeamMembers:
    handler: src/controller/users/getTeamMembers.handler
    events:
      - http:
          cors: true
          method: GET
          path: /teams/{teamId}/users
  deleteTicket:
    handler: src/controller/tickets/deleteTicket.handler
    events:
      - http:
          cors: true
          method: DELETE
          path: /tickets/{ticketId}
  addPlan:
    handler: src/controller/plans/addPlan.handler
    events:
      - http:
          cors: true
          method: POST
          path: /plans
  getUserPlans:
    handler: src/controller/plans/getUserPlans.handler
    events:
      - http:
          cors: true
          method: GET
          path: /users/{userId}/plans
  updatePlan:
    handler: src/controller/plans/updatePlan.handler
    events:
      - http:
          cors: true
          method: PATCH
          path: /plans/{planId}
  deletePlan:
    handler: src/controller/plans/deletePlan.handler
    events:
      - http:
          cors: true
          method: DELETE
          path: /plans/{planId}
  reportAlert:
    handler: src/controller/bot/reportAlert.handler
    events:
      - schedule: cron(0 9 ? * MON-FRI *)
      - schedule: cron(30 9 ? * MON-FRI *)